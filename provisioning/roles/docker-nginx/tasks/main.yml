---
- name: Create config directory
  become: yes
  file:
    path: "/etc/nginx-docker"
    state: directory
    mode: 0755
  tags:
    - nginx

- name: Copy nginx.conf
  become: yes
  notify: restart nginx
  template:
    src: "nginx.conf_all.j2"
    #src: "nginx.conf_nomicroservices.j2"
    dest: "/etc/nginx-docker/nginx.conf"
    owner: root
    group: root
    mode: "0600"
  tags:
    - nginx

- name: Save certificate password to file
  become: yes
  notify: restart nginx
  copy:
    content: "{{ ssl_cert_password }}"
    dest: "/etc/nginx-docker/global.pass"
    onwer: root
    group: root
    mode: "0400"
  tags:
    - nginx

- name: Create www directory
  become: yes
  file:
    path: "/var/www-docker"
    state: directory
    mode: 0755
  tags:
    - nginx

- name: Create www/_config directory
  become: yes
  file:
    path: "/var/www-docker/_config"
    state: directory
    mode: 0755
  tags:
    - nginx
   
#- name: Copy socket.html (test page)
#  become: yes
#  copy:
#    src: "socket.html"
#    dest: "/var/www-docker/_dev/socket.html"
#  tags:
#    - nginx

- name: Copy versions file
  become: yes
  notify: restart nginx
  template:
    src: "versions.json.j2"
    dest: "/var/www-docker/_config/versions.json"
  tags:
    - nginx

- name: Stop and remove nginx container
  become: yes
  docker_container:
    name: nginx
    state: absent
  tags:
    - nginx 

- name: nginx container
  become: yes
  docker_container:
    name: nginx
    image: nginx:stable-alpine
    state: started
    recreate: yes
    restart_policy: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - /var/www-docker:/usr/share/nginx/html:ro
      - /etc/nginx-docker/nginx.conf:/etc/nginx/nginx.conf:ro
      - /etc/nginx-docker/bundle.crt:/etc/ssl/certs/certchain.crt:ro
      - /etc/nginx-docker/{{ssl_cert_keyfile}}:/etc/ssl/private/cert.key:ro
      - /etc/nginx-docker/global.pass:/etc/keys/global.pass:ro
      - /etc/nginx-docker/dhparams-8192.pem:/etc/dhparams.pem:ro
    links:
      - "elasticsearch"
      - "mongo-express"
      #- "piwik"
      - "o2r-muncher"
      - "o2r-informer"
      - "o2r-inspecter"
      - "o2r-bouncer"
      - "o2r-finder"
      - "o2r-loader"
      - "o2r-shipper"
      - "o2r-substituter"
      - "o2r-bindings"
      - "ui"
      #- "o2r-badger"
  tags:
    - nginx

- meta: flush_handlers
  tags:
    - nginx

# next steps disabled, IP injection only needed for o2r-badger
#- name: query IP of webserver container
#  become: yes
#  # https://stackoverflow.com/questions/32279519/escaping-double-curly-braces-in-ansible
#  shell: "docker inspect --format '{{ '{{' }}range .NetworkSettings.Networks}}{{ '{{' }}.IPAddress}}{{ '{{' }}end}}' nginx"
#  register: _webserver_container_query
#  tags:
#    - nginx
#    - insert_ip 
#
#- name: get IP of query result
#  become: yes
#  set_fact:
#    o2r_webserver_container_ip: "{{ _webserver_container_query.stdout | regex_replace('\\s','') }}"
#  tags:
#    - nginx
#    - insert_ip
#
#- debug:
#    msg: "Webserver's container IP is {{ o2r_webserver_container_ip }}, going to inject it to containers' hosts files configured in the next task as the IP for {{ nginx_server_name }}."
#  tags:
#    - nginx
#    - insert_ip
#    
#- include_role:
#    name: docker-badger
#
## Docker manipulates /etc/hosts if it wants to, see http://blog.jonathanargentiero.com/docker-sed-cannot-rename-etcsedl8ysxl-device-or-resource-busy/
#- name: insert nginx container IP into other containers
#  when:
#    - badger_role is defined
#  become: yes
#  # add IP if it does not exist yet
#  shell: "docker exec {{ item }} /bin/sh -c \"if grep -q {{ nginx_server_name }} /etc/hosts ; then echo 'IP for {{ nginx_server_name }} already set in hosts file, if the IP changed, you have to manually clean it from the hosts file in the container, or restart the container.' ; else echo Inserting IP {{ o2r_webserver_container_ip }} for {{ nginx_server_name }} && echo {{ o2r_webserver_container_ip }} {{ nginx_server_name }} >> /etc/hosts ; fi \" "
#  with_items:
#    - "{{ badger_role.container.name }}"
#  register: ipsettingout
#  tags:
#    - nginx
#    - insert_ip
#
#- name: print ip setting result
#  when: ipsettingout.results is defined
#  debug:
#    msg: "{{ item }}"
#  with_items: "{{ ipsettingout.results | map(attribute='stdout_lines') | list }}"
#  tags:
#    - nginx
#    - insert_ip
#  